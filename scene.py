# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'scene.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets

import cv2
import numpy as np
import matplotlib
matplotlib.use('Qt5Agg')
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg, FigureCanvas
from matplotlib.figure import Figure
import matplotlib.pyplot as plt


class Histogram(QtWidgets.QWidget):    
    def __init__(self, parent = None):
        QtWidgets.QWidget.__init__(self, parent)        
        self.canvas = FigureCanvas(Figure(figsize=(5.5, 4)))

        self.canvas.sumbu1 = self.canvas.figure.add_subplot(111)
        self.canvas.figure.set_facecolor("white")

class Ui_Form(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(1100, 500)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(Form.sizePolicy().hasHeightForWidth())
        Form.setSizePolicy(sizePolicy)
        Form.setMinimumSize(QtCore.QSize(1100, 500))
        Form.setMaximumSize(QtCore.QSize(1100, 500))
        self.verticalLayoutWidget = QtWidgets.QWidget(Form)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(0, 0, 1050, 500))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setSpacing(10)
        self.verticalLayout.setObjectName("verticalLayout")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")

        self.ifGrayScale = QtWidgets.QCheckBox('Grayscale ?', self)
        # self.histogram = MplCanvas(self, width=4, height=4, dpi=100)
        self.histogram = Histogram()
        # sc.axes.plot([0,1,2,3,4], [10,1,20,3,40])
        self.horizontalLayout.addWidget(self.histogram.canvas, 0, QtCore.Qt.AlignHCenter|QtCore.Qt.AlignVCenter)

        # self.label_2 = QtWidgets.QLabel(self.verticalLayoutWidget)
        # self.label_2.setObjectName("label_2")
        self.filename = 'default.png'
        self.label = QtWidgets.QLabel(self)
        self.horizontalLayout.addWidget(self.label, 0, QtCore.Qt.AlignHCenter|QtCore.Qt.AlignVCenter)
        self.loadImageFromDisk(self.filename)
        self.updateImage()

        self.horizontalLayout.setStretch(0, 1.5)
        self.horizontalLayout.setSpacing(5)
        self.verticalLayout.addLayout(self.horizontalLayout)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.horizontalSlider = QtWidgets.QSlider(self.verticalLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.horizontalSlider.sizePolicy().hasHeightForWidth())
        self.horizontalSlider.setSizePolicy(sizePolicy)
        self.horizontalSlider.setMinimumSize(QtCore.QSize(500, 30))
        self.horizontalSlider.setMaximumSize(QtCore.QSize(500, 30))
        self.horizontalSlider.setMinimum(-100)
        self.horizontalSlider.setMaximum(100)
        self.horizontalSlider.setTracking(False)
        self.horizontalSlider.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider.setInvertedAppearance(False)
        self.horizontalSlider.setInvertedControls(False)
        self.horizontalSlider.setObjectName("horizontalSlider")
        self.horizontalSlider.sliderReleased.connect(self.sliderCallback)
        self.sliderValue = 0
        self.horizontalLayout_2.addWidget(self.horizontalSlider)
        self.pushButton = QtWidgets.QPushButton(self.verticalLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton.sizePolicy().hasHeightForWidth())
        self.pushButton.setSizePolicy(sizePolicy)
        self.pushButton.setMinimumSize(QtCore.QSize(75, 30))
        self.pushButton.setMaximumSize(QtCore.QSize(75, 30))
        self.pushButton.setObjectName("pushButton")

        self.ifGrayScale.setMinimumSize(QtCore.QSize(100, 30))
        self.ifGrayScale.setMaximumSize(QtCore.QSize(100, 30))
        self.ifGrayScale.clicked.connect(self.updateImage)
        self.horizontalLayout_2.addWidget(self.ifGrayScale)


        self.horizontalLayout_2.addWidget(self.pushButton)
        self.verticalLayout.addLayout(self.horizontalLayout_2)
        self.verticalLayout.setStretch(0, 10)

        self.pushButton.clicked.connect(self.openFileNameDialog)

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        # self.label.setText(_translate("Form", "Image"))
        # self.label_2.setText(_translate("Form", "Plot"))
        self.pushButton.setText(_translate("Form", "Browse"))

    def openFileNameDialog(self):
        options = QtWidgets.QFileDialog.Options()
        options |= QtWidgets.QFileDialog.DontUseNativeDialog
        fileName, _ = QtWidgets.QFileDialog.getOpenFileName(self,"QFileDialog.getOpenFileName()", "","All Files (*);;Image Files (*.jpg)", options=options)
        self.filename = fileName
        self.loadImageFromDisk(self.filename)
        self.updateImage()

    def loadImageFromDisk(self, filename):
        cvImg = cv2.imread(filename)
        # cvImg = cv2.cvtColor(cvImg, cv2.COLOR_BGR2RGB)
        self.img = cvImg
        self.grayImg = cv2.cvtColor(cvImg, cv2.COLOR_BGR2GRAY)
    
    def updateImage(self):

        if(self.ifGrayScale.isChecked()):
            imgToShow = self.grayImg
            format = QtGui.QImage.Format_Grayscale8
            print(imgToShow.shape)
            height, width = imgToShow.shape
        else:
            imgToShow = self.img
            format = QtGui.QImage.Format_BGR888
            print(imgToShow.shape)
            height, width, channel = imgToShow.shape
        qImg = QtGui.QImage(imgToShow.data, width, height, format)
        pixmap = QtGui.QPixmap(qImg)
        pixmap = pixmap.scaled(400, 400, QtCore.Qt.KeepAspectRatio)
        self.label.setPixmap(pixmap)
        self.updateHistogram()

    def loadImageToQPix(self, filename):

        cvImg = cv2.imread(filename)
        height, width, channel = cvImg.shape
        # cvImg = cv2.cvtColor(cvImg, cv2.COLOR_BGR2RGB)
        self.img = cvImg
        self.grayImg = cv2.cvtColor(cvImg, cv2.COLOR_BGR2GRAY)
        if(self.ifGrayScale.isChecked()):
            cvImg = self.grayImg
            format = QtGui.QImage.Format_Grayscale8
        else:
            format = QtGui.QImage.Format_BGR888

        qImg = QtGui.QImage(cvImg.data, width, height, format)

        return qImg
    
    def updateHistogram(self):
        self.histogram.canvas.sumbu1.clear()

        if(self.ifGrayScale.isChecked()):
            
            histr = cv2.calcHist([self.grayImg],[0],None,[256],[0,256])
            self.histogram.canvas.sumbu1.plot(histr,color = 'r',linewidth=3.0)
            self.histogram.canvas.sumbu1.set_ylabel('Y', color='blue')
            self.histogram.canvas.sumbu1.set_xlabel('X', color='blue')
            self.histogram.canvas.sumbu1.set_title('Histogram')
            self.histogram.canvas.sumbu1.set_facecolor('white')
            self.histogram.canvas.sumbu1.grid()
            self.histogram.canvas.draw()
        else:
            color = ('b', 'g', 'r')
            for i,col in enumerate(color):
                histr = cv2.calcHist([self.img],[i],None,[256],[0,256])
                self.histogram.canvas.sumbu1.plot(histr,color = col,linewidth=3.0)
                self.histogram.canvas.sumbu1.set_ylabel('Y', color='blue')
                self.histogram.canvas.sumbu1.set_xlabel('X', color='blue')
                self.histogram.canvas.sumbu1.set_title('Histogram')
                self.histogram.canvas.sumbu1.set_facecolor('white')
                self.histogram.canvas.sumbu1.grid()
            self.histogram.canvas.draw()

    def sliderCallback(self):
        value = self.horizontalSlider.value() - self.sliderValue


    def setBrightness(self, value):

        hsv = cv2.cvtColor(self.img, cv2.COLOR_BGR2HSV)
        h, s, v = cv2.split(hsv)

        dir = value > 0
        value = np.uint8(value)
        lim = 255 - value
        v[v > lim] = 255
        if(dir):
            v[v <= lim] += value
        else:
            v[v <= lim] -= value


        final_hsv = cv2.merge((h, s, v))
        self.img = cv2.cvtColor(final_hsv, cv2.COLOR_HSV2BGR)

        self.updateImage()